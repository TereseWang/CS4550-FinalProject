{"ast":null,"code":"import store from './store';\n\nasync function api_get(path) {\n  let text = await fetch(\"http://localhost:4000/api/v1\" + path, {});\n  let resp = await text.json();\n  return resp.data;\n}\n\nasync function api_post(path, data) {\n  let opts = {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json'\n    },\n    body: JSON.stringify(data)\n  };\n  let text = await fetch(\"http://localhost:4000/api/v1\" + path, opts);\n  return await text.json();\n} //-----------------------Forum----------------------------------\n\n\nexport function fetch_forums() {\n  api_get(\"/forums\").then(data => {\n    data = sortForum(data);\n    store.dispatch({\n      type: 'forums/set',\n      data: data\n    });\n  });\n}\nexport function fetch_forum(id) {\n  api_get(\"/forums/\" + id).then(data => store.dispatch({\n    type: 'forum_form/set',\n    data: data\n  }));\n}\nexport async function create_forum(post) {\n  let data = new FormData();\n  data.append(\"forum[user_id]\", post.user_id);\n  data.append(\"forum[title]\", post.title);\n  data.append(\"forum[body]\", post.body);\n  data.append(\"forum[votes]\", JSON.stringify([]));\n\n  if (post.photo === \"undefined\") {\n    post[\"photo\"] = \"\";\n  }\n\n  data.append(\"forum[photo]\", post.photo);\n  let resp = await fetch(\"http://localhost:4000/api/v1/forums\", {\n    method: \"POST\",\n    body: data\n  });\n  return await resp.json();\n}\nexport async function update_forum(post) {\n  let data = new FormData();\n  data.append(\"forum[user_id]\", post.user_id);\n  data.append(\"forum[title]\", post.title);\n  data.append(\"forum[body]\", post.body);\n  data.append(\"forum[photo]\", post.photo);\n  let resp = await fetch(\"http://localhost:4000/api/v1/forums/\" + post.id, {\n    method: \"PATCH\",\n    body: data\n  });\n  return await resp.json();\n}\nexport async function delete_forum(id) {\n  let data = new FormData();\n  data.append(\"id\", id);\n  fetch(\"http://localhost:4000/api/v1/forums/\" + id, {\n    method: 'DELETE',\n    body: data\n  }).then(resp => {\n    if (!resp.ok) {\n      let action = {\n        type: 'error/set',\n        data: 'Unable to delete event.'\n      };\n      store.dispatch(action);\n    } else {\n      fetch();\n    }\n  });\n}\nexport async function update_forum_vote(post, user_id, action) {\n  let data = new FormData();\n  data.append(\"forum[user_id]\", post.user_id);\n  data.append(\"forum[title]\", post.title);\n  data.append(\"forum[body]\", post.body);\n  let votes = post.votes;\n\n  if (action == \"increase\") {\n    votes.push(user_id);\n  } else {\n    votes = votes.filter(function (e) {\n      return e != user_id;\n    });\n  }\n\n  data.append(\"forum[votes]\", JSON.stringify(votes));\n\n  if (post.photo === \"undefined\") {\n    post[\"photo\"] = \"\";\n  }\n\n  data.append(\"forum[photo]\", post.photo);\n  let resp = await fetch(\"http://localhost:4000/api/v1/forums/\" + post.id, {\n    method: \"PATCH\",\n    body: data\n  });\n  return await resp.json();\n}\nexport function fetch_forum_score(id) {\n  api_get(\"/forums/\" + id).then(data => {\n    store.dispatch({\n      type: 'forum_score/set',\n      data: data.votes.length\n    });\n  });\n}\n\nfunction sortForum(data) {\n  return data.sort(function (a, b) {\n    return b.votes.length - a.votes.length;\n  });\n} //----------------------Wellness Comments -----------------------\n\n\nexport function fetch_comments(health_id) {\n  api_get(\"/comments\").then(data => {\n    let result = [];\n\n    for (let [key, value] of Object.entries(data)) {\n      if (value.health_id == health_id) {\n        result.push(value);\n      }\n    }\n\n    store.dispatch({\n      type: 'comments/set',\n      data: result\n    });\n  });\n}\nexport async function create_comment(comment, user_id, wellness_id) {\n  let data = new FormData();\n  data.append(\"comment[body]\", comment);\n  data.append(\"comment[health_id]\", wellness_id);\n  data.append(\"comment[user_id]\", user_id);\n  let resp = await fetch(\"http://localhost:4000/api/v1/comments\", {\n    method: \"POST\",\n    body: data\n  });\n  return await resp.json();\n}\nexport async function delete_comment(id, wellness_id) {\n  let data = new FormData();\n  data.append(\"id\", id);\n  fetch(\"http://localhost:4000/api/v1/comments/\" + id, {\n    method: 'DELETE',\n    body: data\n  }).then(resp => {\n    if (!resp.ok) {\n      let action = {\n        type: 'error/set',\n        data: 'Unable to delete event.'\n      };\n      store.dispatch(action);\n    } else {\n      console.log(wellness_id);\n      fetch_comments(wellness_id);\n      fetch_wellness();\n    }\n  });\n} //--------------------------Forum Comment -----------------------\n\nexport function fetch_forumcomments(forum_id) {\n  api_get(\"/forumcomments/\").then(data => {\n    let result = [];\n\n    for (let [key, value] of Object.entries(data)) {\n      if (value.forum_id == forum_id) {\n        result.push(value);\n      }\n    }\n\n    store.dispatch({\n      type: 'forumcomments/set',\n      data: result\n    });\n  });\n}\nexport async function create_forumcomment(forumcomment, user_id, forum_id) {\n  let data = new FormData();\n  data.append(\"forumcomment[body]\", forumcomment);\n  data.append(\"forumcomment[forum_id]\", forum_id);\n  data.append(\"forumcomment[user_id]\", user_id);\n  let resp = await fetch(\"http://localhost:4000/api/v1/forumcomments\", {\n    method: \"POST\",\n    body: data\n  });\n  return await resp.json();\n}\nexport async function delete_forumcomment(id, forum_id) {\n  let data = new FormData();\n  data.append(\"id\", id);\n  fetch(\"http://localhost:4000/api/v1/forumcomments/\" + id, {\n    method: 'DELETE',\n    body: data\n  }).then(resp => {\n    if (!resp.ok) {\n      let action = {\n        type: 'error/set',\n        data: 'Unable to delete event.'\n      };\n      store.dispatch(action);\n    } else {\n      console.log(forum_id);\n      fetch_forumcomments(forum_id);\n      fetch_forums();\n    }\n  });\n} //---------------------user--------------------------------------\n\nexport function fetch_users() {\n  api_get(\"/users\").then(data => store.dispatch({\n    type: 'users/set',\n    data: data\n  }));\n}\nexport function fetch_user(id) {\n  api_get(\"/users/\" + id).then(data => store.dispatch({\n    type: 'user_form/set',\n    data: data\n  }));\n}\nexport async function create_user(user) {\n  let data = new FormData();\n  data.append(\"user[name]\", user.name);\n  data.append(\"user[email]\", user.email);\n  data.append(\"user[password]\", user.password);\n  data.append(\"user[reason]\", user.reason);\n\n  if (user.photo === \"undefined\") {\n    user[\"photo\"] = \"\";\n  }\n\n  data.append(\"user[photo]\", user.photo);\n  let resp = await fetch(\"http://localhost:4000/api/v1/users\", {\n    method: \"POST\",\n    body: data\n  });\n  return await resp.json();\n}\nexport async function update_user(user) {\n  let data = new FormData();\n  data.append(\"user_id\", user.id);\n  data.append(\"user[name]\", user.name);\n  data.append(\"user[email]\", user.email);\n  data.append(\"user[password]\", user.password);\n  data.append(\"user[reason]\", user.reason);\n  data.append(\"user[photo]\", user.photo);\n  let resp = await fetch(\"http://localhost:4000/api/v1/users/\" + user.id, {\n    method: \"PATCH\",\n    body: data\n  });\n  return await resp.json();\n} //---------------------wellness page-----------------------------------\n\nexport function fetch_wellness() {\n  api_get(\"/healths\").then(data => {\n    data = sortWellness(data);\n    store.dispatch({\n      type: 'wellness/set',\n      data: data\n    });\n  });\n}\nexport function fetch_single_wellness(id) {\n  api_get(\"/healths/\" + id).then(data => store.dispatch({\n    type: 'wellness_form/set',\n    data: data\n  }));\n}\nexport async function create_wellness(post) {\n  let data = new FormData();\n  data.append(\"health[user_id]\", post.user_id);\n  data.append(\"health[title]\", post.title);\n  data.append(\"health[body]\", post.body);\n  data.append(\"health[votes]\", JSON.stringify([]));\n\n  if (post.photo === \"undefined\") {\n    post[\"photo\"] = \"\";\n  }\n\n  data.append(\"health[photo]\", post.photo);\n  let resp = await fetch(\"http://localhost:4000/api/v1/healths\", {\n    method: \"POST\",\n    body: data\n  });\n  return await resp.json();\n}\nexport async function update_wellness(post) {\n  let data = new FormData();\n  data.append(\"health[user_id]\", post.user_id);\n  data.append(\"health[title]\", post.title);\n  data.append(\"health[body]\", post.body);\n  data.append(\"health[photo]\", post.photo);\n  let resp = await fetch(\"http://localhost:4000/api/v1/healths/\" + post.id, {\n    method: \"PATCH\",\n    body: data\n  });\n  return await resp.json();\n}\nexport async function delete_wellness(id) {\n  let data = new FormData();\n  data.append(\"id\", id);\n  fetch(\"http://localhost:4000/api/v1/healths/\" + id, {\n    method: 'DELETE',\n    body: data\n  }).then(resp => {\n    if (!resp.ok) {\n      let action = {\n        type: 'error/set',\n        data: 'Unable to delete event.'\n      };\n      store.dispatch(action);\n    } else {\n      fetch_wellness();\n    }\n  });\n}\nexport async function update_wellness_vote(post, user_id, action) {\n  let data = new FormData();\n  data.append(\"health[user_id]\", post.user_id);\n  data.append(\"health[title]\", post.title);\n  data.append(\"health[body]\", post.body);\n  let votes = post.votes;\n\n  if (action == \"increase\") {\n    votes.push(user_id);\n  } else {\n    votes = votes.filter(function (e) {\n      return e != user_id;\n    });\n  }\n\n  data.append(\"health[votes]\", JSON.stringify(votes));\n\n  if (post.photo === \"undefined\") {\n    post[\"photo\"] = \"\";\n  }\n\n  data.append(\"health[photo]\", post.photo);\n  let resp = await fetch(\"http://localhost:4000/api/v1/healths/\" + post.id, {\n    method: \"PATCH\",\n    body: data\n  });\n  return await resp.json();\n}\nexport function fetch_score(id) {\n  api_get(\"/healths/\" + id).then(data => {\n    store.dispatch({\n      type: 'score/set',\n      data: data.votes.length\n    });\n  });\n}\nexport function search_wellness(search) {\n  api_get(\"/healths\").then(data => {\n    data = sortWellness(data);\n    data = handle_wellness_search(search, data);\n    store.dispatch({\n      type: 'wellness/set',\n      data: data\n    });\n  });\n}\n\nfunction handle_wellness_search(search, data) {\n  if (search == \"\") {\n    data = sortWellness(data);\n    return data;\n  } else {\n    let result = [];\n\n    for (let [key, value] of Object.entries(data)) {\n      if (value.title.includes(search) || value.body.includes(search)) {\n        result.push(value);\n      }\n    }\n\n    result = sortWellness(result);\n    return result;\n  }\n}\n\nfunction sortWellness(data) {\n  return data.sort(function (a, b) {\n    return b.votes.length - a.votes.length;\n  });\n} //---------------------------login------------------------------------\n\n\nexport function api_login(email, password) {\n  api_post(\"/session\", {\n    email,\n    password\n  }).then(data => {\n    if (data.session) {\n      let action = {\n        type: 'session/set',\n        data: data.session\n      };\n      store.dispatch(action);\n    } else if (data.error) {\n      let action = {\n        type: 'error/set',\n        data: data.error\n      };\n      store.dispatch(action);\n    }\n  });\n}\nexport function fetch_reason(reason) {\n  switch (reason) {\n    case \"Cat Wellness\":\n      return \"/wellness/list\";\n      break;\n\n    case \"Breeder/Adoption\":\n      return \"/selladopt\";\n      break;\n\n    case \"Lost/Found Cats\":\n      return \"/lostfound\";\n      break;\n\n    case \"Food Choices/Recommendations\":\n      return \"/food\";\n      break;\n\n    case \"Other\":\n      return \"/forum\";\n      break;\n\n    default:\n      return \"/\";\n  }\n}\nexport function load_defaults() {\n  fetch_users();\n  fetch_wellness();\n  fetch_forums();\n}","map":{"version":3,"sources":["/media/psf/Home/Desktop/CS4550-FinalProject/web/src/api.js"],"names":["store","api_get","path","text","fetch","resp","json","data","api_post","opts","method","headers","body","JSON","stringify","fetch_forums","then","sortForum","dispatch","type","fetch_forum","id","create_forum","post","FormData","append","user_id","title","photo","update_forum","delete_forum","ok","action","update_forum_vote","votes","push","filter","e","fetch_forum_score","length","sort","a","b","fetch_comments","health_id","result","key","value","Object","entries","create_comment","comment","wellness_id","delete_comment","console","log","fetch_wellness","fetch_forumcomments","forum_id","create_forumcomment","forumcomment","delete_forumcomment","fetch_users","fetch_user","create_user","user","name","email","password","reason","update_user","sortWellness","fetch_single_wellness","create_wellness","update_wellness","delete_wellness","update_wellness_vote","fetch_score","search_wellness","search","handle_wellness_search","includes","api_login","session","error","fetch_reason","load_defaults"],"mappings":"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","sourcesContent":["import store from './store';\n\nasync function api_get(path) {\n  let text = await fetch(\n    \"http://localhost:4000/api/v1\" + path, {});\n  let resp = await text.json();\n  return resp.data;\n}\n\nasync function api_post(path, data) {\n  let opts = {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json'\n    },\n    body: JSON.stringify(data),\n  };\n  let text = await fetch(\n    \"http://localhost:4000/api/v1\" + path, opts);\n  return await text.json();\n}\n//-----------------------Forum----------------------------------\nexport function fetch_forums() {\n  api_get(\"/forums\").then((data) => {\n  data = sortForum(data)\n  store.dispatch({\n    type: 'forums/set',\n    data: data,\n  })});\n}\n\nexport function fetch_forum(id) {\n  api_get(\"/forums/\"+id).then((data) => store.dispatch({\n    type: 'forum_form/set',\n    data: data,\n  }));\n}\n\nexport async function create_forum(post) {\n  let data = new FormData();\n  data.append(\"forum[user_id]\", post.user_id);\n  data.append(\"forum[title]\", post.title);\n  data.append(\"forum[body]\", post.body);\n  data.append(\"forum[votes]\", JSON.stringify([]))\n  if (post.photo === \"undefined\") {\n    post[\"photo\"] = \"\";\n  }\n  data.append(\"forum[photo]\", post.photo);\n  let resp = await fetch(\"http://localhost:4000/api/v1/forums\", {\n    method: \"POST\",\n    body: data,\n  })\nreturn await resp.json();\n}\n\nexport async function update_forum(post) {\n  let data = new FormData();\n  data.append(\"forum[user_id]\", post.user_id);\n  data.append(\"forum[title]\", post.title);\n  data.append(\"forum[body]\", post.body);\n  data.append(\"forum[photo]\", post.photo);\n  let resp = await fetch(\"http://localhost:4000/api/v1/forums/\" + post.id, {\n    method: \"PATCH\",\n    body: data,\n  })\nreturn await resp.json();\n}\n\nexport async function delete_forum(id) {\n  let data = new FormData();\n  data.append(\"id\", id);\n  fetch(\"http://localhost:4000/api/v1/forums/\" + id, {\n    method: 'DELETE',\n    body: data,\n  }).then((resp) => {\n    if(!resp.ok){\n      let action = {\n        type: 'error/set',\n        data: 'Unable to delete event.',\n      };\n      store.dispatch(action);\n    }else {\n      fetch();\n    }\n  });\n}\n\nexport async function update_forum_vote(post, user_id, action) {\n  let data = new FormData();\n  data.append(\"forum[user_id]\", post.user_id);\n  data.append(\"forum[title]\", post.title);\n  data.append(\"forum[body]\", post.body);\n  let votes = post.votes\n  if (action == \"increase\") {\n    votes.push(user_id)\n  }\n  else {\n    votes = votes.filter(function(e) { return e != user_id })\n  }\n  data.append(\"forum[votes]\", JSON.stringify(votes))\n  if (post.photo === \"undefined\") {\n    post[\"photo\"] = \"\";\n  }\n  data.append(\"forum[photo]\", post.photo);\n  let resp = await fetch(\"http://localhost:4000/api/v1/forums/\" + post.id, {\n    method: \"PATCH\",\n    body: data,\n  })\nreturn await resp.json();\n}\n\nexport function fetch_forum_score(id) {\n  api_get(\"/forums/\"+id).then((data) => {\n  store.dispatch({\n    type: 'forum_score/set',\n    data: data.votes.length,\n  })});\n}\n\nfunction sortForum(data) {\n  return data.sort(function(a, b){\n    return b.votes.length - a.votes.length});\n}\n//----------------------Wellness Comments -----------------------\nexport function fetch_comments(health_id) {\n  api_get(\"/comments\").then((data) => {\n    let result = []\n    for (let [key, value] of Object.entries(data)) {\n      if (value.health_id == health_id) {\n        result.push(value)\n      }\n    }\n    store.dispatch({\n    type: 'comments/set',\n    data: result,\n  })})\n}\n\nexport async function create_comment(comment, user_id, wellness_id) {\n  let data = new FormData();\n  data.append(\"comment[body]\", comment);\n  data.append(\"comment[health_id]\", wellness_id);\n  data.append(\"comment[user_id]\", user_id);\n  let resp = await fetch(\"http://localhost:4000/api/v1/comments\", {\n    method: \"POST\",\n    body: data,\n  })\n  return await resp.json();\n}\n\nexport async function delete_comment(id, wellness_id) {\n  let data = new FormData();\n  data.append(\"id\", id);\n  fetch(\"http://localhost:4000/api/v1/comments/\" + id, {\n    method: 'DELETE',\n    body: data,\n  }).then((resp) => {\n    if(!resp.ok){\n      let action = {\n        type: 'error/set',\n        data: 'Unable to delete event.',\n      };\n      store.dispatch(action);\n    }else {\n      console.log(wellness_id)\n      fetch_comments(wellness_id);\n      fetch_wellness()\n    }\n  });\n}\n\n//--------------------------Forum Comment -----------------------\nexport function fetch_forumcomments(forum_id) {\n  api_get(\"/forumcomments/\").then((data) => {\n    let result = []\n    for (let [key, value] of Object.entries(data)) {\n      if (value.forum_id == forum_id) {\n        result.push(value)\n      }\n    }\n    store.dispatch({\n    type: 'forumcomments/set',\n    data: result,\n  })})\n}\n\nexport async function create_forumcomment(forumcomment, user_id, forum_id) {\n  let data = new FormData();\n  data.append(\"forumcomment[body]\", forumcomment);\n  data.append(\"forumcomment[forum_id]\", forum_id);\n  data.append(\"forumcomment[user_id]\", user_id);\n  let resp = await fetch(\"http://localhost:4000/api/v1/forumcomments\", {\n    method: \"POST\",\n    body: data,\n  })\n  return await resp.json();\n}\n\nexport async function delete_forumcomment(id, forum_id) {\n  let data = new FormData();\n  data.append(\"id\", id);\n  fetch(\"http://localhost:4000/api/v1/forumcomments/\" + id, {\n    method: 'DELETE',\n    body: data,\n  }).then((resp) => {\n    if(!resp.ok){\n      let action = {\n        type: 'error/set',\n        data: 'Unable to delete event.',\n      };\n      store.dispatch(action);\n    }else {\n      console.log(forum_id)\n      fetch_forumcomments(forum_id);\n      fetch_forums()\n    }\n  });\n}\n\n//---------------------user--------------------------------------\nexport function fetch_users() {\n    api_get(\"/users\").then((data) => store.dispatch({\n        type: 'users/set',\n        data: data,\n    }));\n}\n\nexport function fetch_user(id) {\n  api_get(\"/users/\" + id).then((data) => store.dispatch({\n      type: 'user_form/set',\n      data: data,\n  }));\n}\n\nexport async function create_user(user) {\n  let data = new FormData();\n  data.append(\"user[name]\", user.name);\n  data.append(\"user[email]\", user.email);\n  data.append(\"user[password]\", user.password);\n  data.append(\"user[reason]\", user.reason);\n  if (user.photo === \"undefined\") {\n    user[\"photo\"] = \"\";\n  }\n  data.append(\"user[photo]\", user.photo);\n  let resp = await fetch(\"http://localhost:4000/api/v1/users\", {\n    method: \"POST\",\n    body: data,\n  })\nreturn await resp.json();\n}\n\nexport async function update_user(user) {\n  let data = new FormData();\n  data.append(\"user_id\", user.id);\n  data.append(\"user[name]\", user.name);\n  data.append(\"user[email]\", user.email);\n  data.append(\"user[password]\", user.password);\n  data.append(\"user[reason]\", user.reason);\n  data.append(\"user[photo]\", user.photo);\n  let resp = await fetch(\"http://localhost:4000/api/v1/users/\" + user.id, {\n    method: \"PATCH\",\n    body: data,\n  })\nreturn await resp.json();\n}\n//---------------------wellness page-----------------------------------\nexport function fetch_wellness() {\n  api_get(\"/healths\").then((data) => {\n  data = sortWellness(data)\n  store.dispatch({\n    type: 'wellness/set',\n    data: data,\n  })});\n}\n\n\nexport function fetch_single_wellness(id) {\n  api_get(\"/healths/\"+id).then((data) => store.dispatch({\n    type: 'wellness_form/set',\n    data: data,\n  }));\n}\n\nexport async function create_wellness(post) {\n  let data = new FormData();\n  data.append(\"health[user_id]\", post.user_id);\n  data.append(\"health[title]\", post.title);\n  data.append(\"health[body]\", post.body);\n  data.append(\"health[votes]\", JSON.stringify([]))\n  if (post.photo === \"undefined\") {\n    post[\"photo\"] = \"\";\n  }\n  data.append(\"health[photo]\", post.photo);\n  let resp = await fetch(\"http://localhost:4000/api/v1/healths\", {\n    method: \"POST\",\n    body: data,\n  })\nreturn await resp.json();\n}\n\nexport async function update_wellness(post) {\n  let data = new FormData();\n  data.append(\"health[user_id]\", post.user_id);\n  data.append(\"health[title]\", post.title);\n  data.append(\"health[body]\", post.body);\n  data.append(\"health[photo]\", post.photo);\n  let resp = await fetch(\"http://localhost:4000/api/v1/healths/\" + post.id, {\n    method: \"PATCH\",\n    body: data,\n  })\nreturn await resp.json();\n}\n\nexport async function delete_wellness(id) {\n  let data = new FormData();\n  data.append(\"id\", id);\n  fetch(\"http://localhost:4000/api/v1/healths/\" + id, {\n    method: 'DELETE',\n    body: data,\n  }).then((resp) => {\n    if(!resp.ok){\n      let action = {\n        type: 'error/set',\n        data: 'Unable to delete event.',\n      };\n      store.dispatch(action);\n    }else {\n      fetch_wellness();\n    }\n  });\n}\n\nexport async function update_wellness_vote(post, user_id, action) {\n  let data = new FormData();\n  data.append(\"health[user_id]\", post.user_id);\n  data.append(\"health[title]\", post.title);\n  data.append(\"health[body]\", post.body);\n  let votes = post.votes\n  if (action == \"increase\") {\n    votes.push(user_id)\n  }\n  else {\n    votes = votes.filter(function(e) { return e != user_id })\n  }\n  data.append(\"health[votes]\", JSON.stringify(votes))\n  if (post.photo === \"undefined\") {\n    post[\"photo\"] = \"\";\n  }\n  data.append(\"health[photo]\", post.photo);\n  let resp = await fetch(\"http://localhost:4000/api/v1/healths/\" + post.id, {\n    method: \"PATCH\",\n    body: data,\n  })\nreturn await resp.json();\n}\n\nexport function fetch_score(id) {\n  api_get(\"/healths/\"+id).then((data) => {\n  store.dispatch({\n    type: 'score/set',\n    data: data.votes.length,\n  })});\n}\n\nexport function search_wellness(search) {\n  api_get(\"/healths\").then((data) => {\n  data = sortWellness(data)\n  data = handle_wellness_search(search, data)\n  store.dispatch({\n    type: 'wellness/set',\n    data: data,\n  })});\n}\n\nfunction handle_wellness_search(search, data) {\n  if (search == \"\") {\n    data = sortWellness(data)\n    return data\n  }\n  else {\n    let result = []\n    for (let [key, value] of Object.entries(data)) {\n      if (value.title.includes(search) || value.body.includes(search)) {\n        result.push(value)\n      }\n    }\n    result = sortWellness(result)\n    return result\n  }\n}\n\nfunction sortWellness(data) {\n  return data.sort(function(a, b){\n    return b.votes.length - a.votes.length});\n}\n\n//---------------------------login------------------------------------\nexport function api_login(email, password) {\n  api_post(\"/session\", {email, password}).then((data) => {\n    if (data.session) {\n      let action = {\n        type: 'session/set',\n        data: data.session,\n      }\n      store.dispatch(action);\n    }\n    else if (data.error) {\n     let action = {\n        type: 'error/set',\n        data: data.error,\n      }\n      store.dispatch(action);\n    }\n  });\n}\n\nexport function fetch_reason(reason) {\n  switch(reason){\n    case \"Cat Wellness\":\n      return \"/wellness/list\"\n      break;\n    case \"Breeder/Adoption\":\n      return \"/selladopt\"\n      break;\n    case \"Lost/Found Cats\":\n      return \"/lostfound\"\n      break;\n    case \"Food Choices/Recommendations\":\n      return \"/food\"\n      break;\n    case \"Other\":\n      return \"/forum\"\n      break;\n    default:\n      return \"/\"\n    }\n}\nexport function load_defaults() {\n  fetch_users();\n  fetch_wellness();\n  fetch_forums();\n}\n"]},"metadata":{},"sourceType":"module"}