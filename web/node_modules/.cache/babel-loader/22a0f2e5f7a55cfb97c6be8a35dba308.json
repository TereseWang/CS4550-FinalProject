{"ast":null,"code":"import store from './store';\n\nasync function api_get(path) {\n  let text = await fetch(\"http://localhost:4000/api/v1\" + path, {});\n  let resp = await text.json();\n  return resp.data;\n}\n\nasync function api_post(path, data) {\n  let opts = {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json'\n    },\n    body: JSON.stringify(data)\n  };\n  let text = await fetch(\"http://localhost:4000/api/v1\" + path, opts);\n  return await text.json();\n}\n\nexport function fetch_users() {\n  api_get(\"/users\").then(data => store.dispatch({\n    type: 'users/set',\n    data: data\n  }));\n}\nexport function fetch_user(id) {\n  api_get(\"/users/\" + id).then(data => store.dispatch({\n    type: 'users/single',\n    data: data\n  }));\n}\nexport function fetch_wellness() {\n  api_get(\"/healths\").then(data => store.dispatch({\n    type: 'wellness/set',\n    data: data\n  }));\n}\nexport function search_wellness(search) {\n  console.log(search);\n  api_get(\"/healths\").then(data => store.dispatch({\n    type: 'wellness/set',\n    data: Object.entries(data).slice(0, 5).map(entry => entry[1])\n  }));\n}\nexport function fetch_single_wellness(id) {\n  api_get(\"/healths/\" + id).then(data => store.dispatch({\n    type: 'wellness/single',\n    data: data\n  }));\n}\nexport function api_login(email, password) {\n  api_post(\"/session\", {\n    email,\n    password\n  }).then(data => {\n    if (data.session) {\n      let action = {\n        type: 'session/set',\n        data: data.session\n      };\n      store.dispatch(action);\n    } else if (data.error) {\n      let action = {\n        type: 'error/set',\n        data: data.error\n      };\n      store.dispatch(action);\n    }\n  });\n}\nexport async function create_user(user) {\n  let data = new FormData();\n  data.append(\"user[name]\", user.name);\n  data.append(\"user[email]\", user.email);\n  data.append(\"user[password]\", user.password);\n  data.append(\"user[reason]\", user.reason);\n\n  if (user.photo === \"undefined\") {\n    user[\"photo\"] = \"\";\n  }\n\n  data.append(\"user[photo]\", user.photo);\n  let resp = await fetch(\"http://localhost:4000/api/v1/users\", {\n    method: \"POST\",\n    body: data\n  });\n  return await resp.json();\n}\nexport async function update_user(user) {\n  let data = new FormData();\n  data.append(\"user_id\", user.id);\n  data.append(\"user[name]\", user.name);\n  data.append(\"user[email]\", user.email);\n  data.append(\"user[password]\", user.password);\n  data.append(\"user[reason]\", user.reason);\n  data.append(\"user[photo]\", user.photo);\n  let resp = await fetch(\"http://localhost:4000/api/v1/users/\" + user.id, {\n    method: \"PATCH\",\n    body: data\n  });\n  return await resp.json();\n}\nexport async function update_wellness(post) {\n  let data = new FormData();\n  data.append(\"health[user_id]\", post.user_id);\n  data.append(\"health[title]\", post.title);\n  data.append(\"health[body]\", post.body);\n  data.append(\"health[photo]\", post.photo);\n  let resp = await fetch(\"http://localhost:4000/api/v1/healths/\" + post.id, {\n    method: \"PATCH\",\n    body: data\n  });\n  return await resp.json();\n}\nexport async function create_wellness(post) {\n  let data = new FormData();\n  data.append(\"health[user_id]\", post.user_id);\n  data.append(\"health[title]\", post.title);\n  data.append(\"health[body]\", post.body);\n\n  if (post.photo === \"undefined\") {\n    post[\"photo\"] = \"\";\n  }\n\n  data.append(\"health[photo]\", post.photo);\n  let resp = await fetch(\"http://localhost:4000/api/v1/healths\", {\n    method: \"POST\",\n    body: data\n  });\n  return await resp.json();\n}\nexport function fetch_reason(reason) {\n  switch (reason) {\n    case \"Cat Wellness\":\n      return \"/wellness/list\";\n      break;\n\n    case \"Breeder/Adoption\":\n      return \"/selladopt\";\n      break;\n\n    case \"Lost/Found Cats\":\n      return \"/lostfound\";\n      break;\n\n    case \"Food Choices/Recommendations\":\n      return \"/food\";\n      break;\n\n    case \"Other\":\n      return \"/forum\";\n      break;\n\n    default:\n      return \"/\";\n  }\n}\nexport function load_defaults() {\n  fetch_users();\n  fetch_wellness();\n}","map":{"version":3,"sources":["/media/psf/Home/Desktop/CS4550-FinalProject/web/src/api.js"],"names":["store","api_get","path","text","fetch","resp","json","data","api_post","opts","method","headers","body","JSON","stringify","fetch_users","then","dispatch","type","fetch_user","id","fetch_wellness","search_wellness","search","console","log","Object","entries","slice","map","entry","fetch_single_wellness","api_login","email","password","session","action","error","create_user","user","FormData","append","name","reason","photo","update_user","update_wellness","post","user_id","title","create_wellness","fetch_reason","load_defaults"],"mappings":"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","sourcesContent":["import store from './store';\n\nasync function api_get(path) {\n  let text = await fetch(\n    \"http://localhost:4000/api/v1\" + path, {});\n  let resp = await text.json();\n  return resp.data;\n}\n\nasync function api_post(path, data) {\n  let opts = {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json'\n    },\n    body: JSON.stringify(data),\n  };\n  let text = await fetch(\n    \"http://localhost:4000/api/v1\" + path, opts);\n  return await text.json();\n}\n\nexport function fetch_users() {\n    api_get(\"/users\").then((data) => store.dispatch({\n        type: 'users/set',\n        data: data,\n    }));\n}\n\nexport function fetch_user(id) {\n  api_get(\"/users/\" + id).then((data) => store.dispatch({\n    type: 'users/single',\n    data: data,\n  }));\n}\n\nexport function fetch_wellness() {\n  api_get(\"/healths\").then((data) => store.dispatch({\n    type: 'wellness/set',\n    data: data,\n  }));\n}\n\nexport function search_wellness(search) {\n  console.log(search)\n  api_get(\"/healths\").then((data) => store.dispatch({\n    type: 'wellness/set',\n    data: Object.entries(data).slice(0,5).map(entry => entry[1]),\n  }));\n}\n\nexport function fetch_single_wellness(id) {\n  api_get(\"/healths/\" + id).then((data) => store.dispatch({\n    type: 'wellness/single',\n    data: data,\n  }));\n}\n\nexport function api_login(email, password) {\n  api_post(\"/session\", {email, password}).then((data) => {\n    if (data.session) {\n      let action = {\n        type: 'session/set',\n        data: data.session,\n      }\n      store.dispatch(action);\n    }\n    else if (data.error) {\n     let action = {\n        type: 'error/set',\n        data: data.error,\n      }\n      store.dispatch(action);\n    }\n  });\n}\n\nexport async function create_user(user) {\n  let data = new FormData();\n  data.append(\"user[name]\", user.name);\n  data.append(\"user[email]\", user.email);\n  data.append(\"user[password]\", user.password);\n  data.append(\"user[reason]\", user.reason);\n  if (user.photo === \"undefined\") {\n    user[\"photo\"] = \"\";\n  }\n  data.append(\"user[photo]\", user.photo);\n  let resp = await fetch(\"http://localhost:4000/api/v1/users\", {\n    method: \"POST\",\n    body: data,\n  })\nreturn await resp.json();\n}\n\nexport async function update_user(user) {\n  let data = new FormData();\n  data.append(\"user_id\", user.id);\n  data.append(\"user[name]\", user.name);\n  data.append(\"user[email]\", user.email);\n  data.append(\"user[password]\", user.password);\n  data.append(\"user[reason]\", user.reason);\n  data.append(\"user[photo]\", user.photo);\n  let resp = await fetch(\"http://localhost:4000/api/v1/users/\" + user.id, {\n    method: \"PATCH\",\n    body: data,\n  })\nreturn await resp.json();\n}\n\nexport async function update_wellness(post) {\n  let data = new FormData();\n  data.append(\"health[user_id]\", post.user_id);\n  data.append(\"health[title]\", post.title);\n  data.append(\"health[body]\", post.body);\n  data.append(\"health[photo]\", post.photo);\n  let resp = await fetch(\"http://localhost:4000/api/v1/healths/\" + post.id, {\n    method: \"PATCH\",\n    body: data,\n  })\nreturn await resp.json();\n}\n\n\nexport async function create_wellness(post) {\n  let data = new FormData();\n  data.append(\"health[user_id]\", post.user_id);\n  data.append(\"health[title]\", post.title);\n  data.append(\"health[body]\", post.body);\n  if (post.photo === \"undefined\") {\n    post[\"photo\"] = \"\";\n  }\n  data.append(\"health[photo]\", post.photo);\n  let resp = await fetch(\"http://localhost:4000/api/v1/healths\", {\n    method: \"POST\",\n    body: data,\n  })\nreturn await resp.json();\n}\n\nexport function fetch_reason(reason) {\n  switch(reason){\n    case \"Cat Wellness\":\n      return \"/wellness/list\"\n      break;\n    case \"Breeder/Adoption\":\n      return \"/selladopt\"\n      break;\n    case \"Lost/Found Cats\":\n      return \"/lostfound\"\n      break;\n    case \"Food Choices/Recommendations\":\n      return \"/food\"\n      break;\n    case \"Other\":\n      return \"/forum\"\n      break;\n    default:\n      return \"/\"\n    }\n}\nexport function load_defaults() {\n  fetch_users();\n  fetch_wellness();\n}\n"]},"metadata":{},"sourceType":"module"}