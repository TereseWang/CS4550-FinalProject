{"ast":null,"code":"import store from './store';\n\nasync function api_get(path) {\n  let text = await fetch(\"http://localhost:4000/api/v1\" + path, {});\n  let resp = await text.json();\n  return resp.data;\n}\n\nasync function api_post(path, data) {\n  let opts = {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json'\n    },\n    body: JSON.stringify(data)\n  };\n  let text = await fetch(\"http://localhost:4000/api/v1\" + path, opts);\n  return await text.json();\n} //---------------------user--------------------------------------\n\n\nexport function fetch_users() {\n  api_get(\"/users\").then(data => store.dispatch({\n    type: 'users/set',\n    data: data\n  }));\n}\nexport function fetch_user(id) {\n  api_get(\"/users/\" + id).then(data => store.dispatch({\n    type: 'users/single',\n    data: data\n  }));\n}\nexport async function create_user(user) {\n  console.log(user);\n  let data = new FormData();\n  data.append(\"user[name]\", user.name);\n  data.append(\"user[email]\", user.email);\n  data.append(\"user[password]\", user.password);\n  data.append(\"user[reason]\", user.reason);\n  console.log(data);\n\n  if (user.photo === \"undefined\") {\n    user[\"photo\"] = \"\";\n  }\n\n  data.append(\"user[photo]\", user.photo);\n  let resp = await fetch(\"http://localhost:4000/api/v1/users\", {\n    method: \"POST\",\n    body: data\n  });\n  return await resp.json();\n}\nexport async function update_user(user) {\n  let data = new FormData();\n  data.append(\"user_id\", user.id);\n  data.append(\"user[name]\", user.name);\n  data.append(\"user[email]\", user.email);\n  data.append(\"user[password]\", user.password);\n  data.append(\"user[reason]\", user.reason);\n  data.append(\"user[photo]\", user.photo);\n  let resp = await fetch(\"http://localhost:4000/api/v1/users/\" + user.id, {\n    method: \"PATCH\",\n    body: data\n  });\n  return await resp.json();\n} //---------------------wellness page-----------------------------------\n\nexport function fetch_wellness() {\n  api_get(\"/healths\").then(data => {\n    data = sortWellness(data);\n    store.dispatch({\n      type: 'wellness/set',\n      data: data\n    });\n  });\n}\nexport function fetch_single_wellness(id) {\n  var score = 0;\n  api_get(\"/healths/\" + id).then(data => {\n    score = data.votes.length;\n    store.dispatch({\n      type: 'score/set',\n      data: score\n    });\n    store.dispatch({\n      type: 'wellness/single',\n      data: data\n    });\n  });\n}\nexport async function create_wellness(post) {\n  let data = new FormData();\n  data.append(\"health[user_id]\", post.user_id);\n  data.append(\"health[title]\", post.title);\n  data.append(\"health[body]\", post.body);\n  data.append(\"health[votes]\", JSON.stringify([]));\n\n  if (post.photo === \"undefined\") {\n    post[\"photo\"] = \"\";\n  }\n\n  data.append(\"health[photo]\", post.photo);\n  let resp = await fetch(\"http://localhost:4000/api/v1/healths\", {\n    method: \"POST\",\n    body: data\n  });\n  return await resp.json();\n}\nexport async function update_wellness(post) {\n  let data = new FormData();\n  data.append(\"health[user_id]\", post.user_id);\n  data.append(\"health[title]\", post.title);\n  data.append(\"health[body]\", post.body);\n  data.append(\"health[photo]\", post.photo);\n  let resp = await fetch(\"http://localhost:4000/api/v1/healths/\" + post.id, {\n    method: \"PATCH\",\n    body: data\n  });\n  return await resp.json();\n}\nexport async function update_wellness_vote(post, user_id, action) {\n  let data = new FormData();\n  data.append(\"health[user_id]\", user_id);\n  data.append(\"health[title]\", post.title);\n  data.append(\"health[body]\", post.body);\n  data.append(\"health[photo]\", post.photo);\n  var votes;\n\n  if (action) {\n    votes = post.votes.push(user_id);\n  } else {\n    votes = post.votes.pop(user_id);\n  }\n\n  data.append(\"health[votes]\", JSON.stringify(votes));\n  let resp = await fetch(\"http://localhost:4000/api/v1/healths/\" + post.id, {\n    method: \"PATCH\",\n    body: data\n  });\n  fetch_single_wellness(id);\n  return await resp.json();\n}\nexport function search_wellness(search) {\n  api_get(\"/healths\").then(data => {\n    data = sortWellness(data);\n    data = handle_wellness_search(search, data);\n    store.dispatch({\n      type: 'wellness/set',\n      data: data\n    });\n  });\n}\n\nfunction handle_wellness_search(search, data) {\n  if (search == \"\") {\n    data = sortWellness(data);\n    return data;\n  } else {\n    let result = [];\n\n    for (let [key, value] of Object.entries(data)) {\n      if (value.title.includes(search) || value.body.includes(search)) {\n        result.push(value);\n      }\n    }\n\n    result = sortWellness(result);\n    return result;\n  }\n}\n\nfunction sortWellness(data) {\n  return data.sort(function (a, b) {\n    return a.id - b.id;\n  });\n} //---------------------------login------------------------------------\n\n\nexport function api_login(email, password) {\n  api_post(\"/session\", {\n    email,\n    password\n  }).then(data => {\n    if (data.session) {\n      let action = {\n        type: 'session/set',\n        data: data.session\n      };\n      store.dispatch(action);\n    } else if (data.error) {\n      let action = {\n        type: 'error/set',\n        data: data.error\n      };\n      store.dispatch(action);\n    }\n  });\n}\nexport function fetch_reason(reason) {\n  switch (reason) {\n    case \"Cat Wellness\":\n      return \"/wellness/list\";\n      break;\n\n    case \"Breeder/Adoption\":\n      return \"/selladopt\";\n      break;\n\n    case \"Lost/Found Cats\":\n      return \"/lostfound\";\n      break;\n\n    case \"Food Choices/Recommendations\":\n      return \"/food\";\n      break;\n\n    case \"Other\":\n      return \"/forum\";\n      break;\n\n    default:\n      return \"/\";\n  }\n}\nexport function load_defaults() {\n  fetch_users();\n  fetch_wellness();\n}","map":{"version":3,"sources":["/media/psf/Home/Desktop/CS4550-FinalProject/web/src/api.js"],"names":["store","api_get","path","text","fetch","resp","json","data","api_post","opts","method","headers","body","JSON","stringify","fetch_users","then","dispatch","type","fetch_user","id","create_user","user","console","log","FormData","append","name","email","password","reason","photo","update_user","fetch_wellness","sortWellness","fetch_single_wellness","score","votes","length","create_wellness","post","user_id","title","update_wellness","update_wellness_vote","action","push","pop","search_wellness","search","handle_wellness_search","result","key","value","Object","entries","includes","sort","a","b","api_login","session","error","fetch_reason","load_defaults"],"mappings":"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","sourcesContent":["import store from './store';\n\nasync function api_get(path) {\n  let text = await fetch(\n    \"http://localhost:4000/api/v1\" + path, {});\n  let resp = await text.json();\n  return resp.data;\n}\n\nasync function api_post(path, data) {\n  let opts = {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json'\n    },\n    body: JSON.stringify(data),\n  };\n  let text = await fetch(\n    \"http://localhost:4000/api/v1\" + path, opts);\n  return await text.json();\n}\n//---------------------user--------------------------------------\nexport function fetch_users() {\n    api_get(\"/users\").then((data) => store.dispatch({\n        type: 'users/set',\n        data: data,\n    }));\n}\n\nexport function fetch_user(id) {\n  api_get(\"/users/\" + id).then((data) => store.dispatch({\n    type: 'users/single',\n    data: data,\n  }));\n}\n\nexport async function create_user(user) {\n  console.log(user)\n  let data = new FormData();\n  data.append(\"user[name]\", user.name);\n  data.append(\"user[email]\", user.email);\n  data.append(\"user[password]\", user.password);\n  data.append(\"user[reason]\", user.reason);\n  console.log(data)\n  if (user.photo === \"undefined\") {\n    user[\"photo\"] = \"\";\n  }\n  data.append(\"user[photo]\", user.photo);\n  let resp = await fetch(\"http://localhost:4000/api/v1/users\", {\n    method: \"POST\",\n    body: data,\n  })\nreturn await resp.json();\n}\n\nexport async function update_user(user) {\n  let data = new FormData();\n  data.append(\"user_id\", user.id);\n  data.append(\"user[name]\", user.name);\n  data.append(\"user[email]\", user.email);\n  data.append(\"user[password]\", user.password);\n  data.append(\"user[reason]\", user.reason);\n  data.append(\"user[photo]\", user.photo);\n  let resp = await fetch(\"http://localhost:4000/api/v1/users/\" + user.id, {\n    method: \"PATCH\",\n    body: data,\n  })\nreturn await resp.json();\n}\n//---------------------wellness page-----------------------------------\nexport function fetch_wellness() {\n  api_get(\"/healths\").then((data) => {\n  data = sortWellness(data)\n  store.dispatch({\n    type: 'wellness/set',\n    data: data,\n  })});\n}\n\nexport function fetch_single_wellness(id) {\n  var score = 0;\n  api_get(\"/healths/\" + id).then((data) => {\n    score = data.votes.length;\n    store.dispatch({\n      type: 'score/set',\n      data: score,\n    });\n\n    store.dispatch({\n    type: 'wellness/single',\n    data: data,\n  })});\n}\n\nexport async function create_wellness(post) {\n  let data = new FormData();\n  data.append(\"health[user_id]\", post.user_id);\n  data.append(\"health[title]\", post.title);\n  data.append(\"health[body]\", post.body);\n  data.append(\"health[votes]\", JSON.stringify([]))\n  if (post.photo === \"undefined\") {\n    post[\"photo\"] = \"\";\n  }\n  data.append(\"health[photo]\", post.photo);\n  let resp = await fetch(\"http://localhost:4000/api/v1/healths\", {\n    method: \"POST\",\n    body: data,\n  })\nreturn await resp.json();\n}\n\nexport async function update_wellness(post) {\n  let data = new FormData();\n  data.append(\"health[user_id]\", post.user_id);\n  data.append(\"health[title]\", post.title);\n  data.append(\"health[body]\", post.body);\n  data.append(\"health[photo]\", post.photo);\n  let resp = await fetch(\"http://localhost:4000/api/v1/healths/\" + post.id, {\n    method: \"PATCH\",\n    body: data,\n  })\nreturn await resp.json();\n}\n\nexport async function update_wellness_vote(post, user_id, action) {\n  let data = new FormData();\n  data.append(\"health[user_id]\", user_id);\n  data.append(\"health[title]\", post.title);\n  data.append(\"health[body]\", post.body);\n  data.append(\"health[photo]\", post.photo);\n  var votes;\n  if (action) {\n    votes = post.votes.push(user_id)\n  }\n  else {\n    votes = post.votes.pop(user_id)\n  }\n  data.append(\"health[votes]\", JSON.stringify(votes));\n  let resp = await fetch(\"http://localhost:4000/api/v1/healths/\" + post.id, {\n    method: \"PATCH\",\n    body: data,\n  })\n  fetch_single_wellness(id)\n  return await resp.json();\n}\n\nexport function search_wellness(search) {\n  api_get(\"/healths\").then((data) => {\n  data = sortWellness(data)\n  data = handle_wellness_search(search, data)\n  store.dispatch({\n    type: 'wellness/set',\n    data: data,\n  })});\n}\n\nfunction handle_wellness_search(search, data) {\n  if (search == \"\") {\n    data = sortWellness(data)\n    return data\n  }\n  else {\n    let result = []\n    for (let [key, value] of Object.entries(data)) {\n      if (value.title.includes(search) || value.body.includes(search)) {\n        result.push(value)\n      }\n    }\n    result = sortWellness(result)\n    return result\n  }\n}\n\nfunction sortWellness(data) {\n  return data.sort(function(a, b){\n    return a.id - b.id});\n}\n\n//---------------------------login------------------------------------\nexport function api_login(email, password) {\n  api_post(\"/session\", {email, password}).then((data) => {\n    if (data.session) {\n      let action = {\n        type: 'session/set',\n        data: data.session,\n      }\n      store.dispatch(action);\n    }\n    else if (data.error) {\n     let action = {\n        type: 'error/set',\n        data: data.error,\n      }\n      store.dispatch(action);\n    }\n  });\n}\n\nexport function fetch_reason(reason) {\n  switch(reason){\n    case \"Cat Wellness\":\n      return \"/wellness/list\"\n      break;\n    case \"Breeder/Adoption\":\n      return \"/selladopt\"\n      break;\n    case \"Lost/Found Cats\":\n      return \"/lostfound\"\n      break;\n    case \"Food Choices/Recommendations\":\n      return \"/food\"\n      break;\n    case \"Other\":\n      return \"/forum\"\n      break;\n    default:\n      return \"/\"\n    }\n}\nexport function load_defaults() {\n  fetch_users();\n  fetch_wellness();\n}\n"]},"metadata":{},"sourceType":"module"}