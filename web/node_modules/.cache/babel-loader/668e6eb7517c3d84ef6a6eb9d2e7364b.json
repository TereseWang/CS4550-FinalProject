{"ast":null,"code":"import store from './store';\n\nasync function api_get(path) {\n  let text = await fetch(\"http://localhost:4000/api/v1\" + path, {});\n  let resp = await text.json();\n  return resp.data;\n}\n\nasync function api_post(path, data) {\n  let opts = {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json'\n    },\n    body: JSON.stringify(data)\n  };\n  let text = await fetch(\"http://localhost:4000/api/v1\" + path, opts);\n  return await text.json();\n} //----------------------Wellness Comments -----------------------\n\n\nexport function fetch_comments(health_id) {\n  api_get(\"/comments\").then(data => {\n    let result = [];\n\n    for (let [key, value] of Object.entries(data)) {\n      if (value.health_id == health_id) {\n        result.push(value);\n      }\n    }\n\n    console.log(result);\n    store.dispatch({\n      type: 'comments/set',\n      data: result\n    });\n  });\n}\nexport async function create_comment(comment, user_id, health_id) {} //---------------------user--------------------------------------\n\nexport function fetch_users() {\n  api_get(\"/users\").then(data => store.dispatch({\n    type: 'users/set',\n    data: data\n  }));\n}\nexport function fetch_user(id) {\n  api_get(\"/users/\" + id).then(data => store.dispatch({\n    type: 'user_form/set',\n    data: data\n  }));\n}\nexport async function create_user(user) {\n  console.log(user);\n  let data = new FormData();\n  data.append(\"user[name]\", user.name);\n  data.append(\"user[email]\", user.email);\n  data.append(\"user[password]\", user.password);\n  data.append(\"user[reason]\", user.reason);\n  console.log(data);\n\n  if (user.photo === \"undefined\") {\n    user[\"photo\"] = \"\";\n  }\n\n  data.append(\"user[photo]\", user.photo);\n  let resp = await fetch(\"http://localhost:4000/api/v1/users\", {\n    method: \"POST\",\n    body: data\n  });\n  return await resp.json();\n}\nexport async function update_user(user) {\n  let data = new FormData();\n  data.append(\"user_id\", user.id);\n  data.append(\"user[name]\", user.name);\n  data.append(\"user[email]\", user.email);\n  data.append(\"user[password]\", user.password);\n  data.append(\"user[reason]\", user.reason);\n  data.append(\"user[photo]\", user.photo);\n  let resp = await fetch(\"http://localhost:4000/api/v1/users/\" + user.id, {\n    method: \"PATCH\",\n    body: data\n  });\n  return await resp.json();\n} //---------------------wellness page-----------------------------------\n\nexport function fetch_wellness() {\n  api_get(\"/healths\").then(data => {\n    data = sortWellness(data);\n    store.dispatch({\n      type: 'wellness/set',\n      data: data\n    });\n  });\n}\nexport function fetch_single_wellness(id) {\n  api_get(\"/healths/\" + id).then(data => store.dispatch({\n    type: 'wellness_form/set',\n    data: data\n  }));\n}\nexport async function create_wellness(post) {\n  let data = new FormData();\n  data.append(\"health[user_id]\", post.user_id);\n  data.append(\"health[title]\", post.title);\n  data.append(\"health[body]\", post.body);\n  data.append(\"health[votes]\", JSON.stringify([]));\n\n  if (post.photo === \"undefined\") {\n    post[\"photo\"] = \"\";\n  }\n\n  data.append(\"health[photo]\", post.photo);\n  let resp = await fetch(\"http://localhost:4000/api/v1/healths\", {\n    method: \"POST\",\n    body: data\n  });\n  return await resp.json();\n}\nexport async function update_wellness(post) {\n  let data = new FormData();\n  data.append(\"health[user_id]\", post.user_id);\n  data.append(\"health[title]\", post.title);\n  data.append(\"health[body]\", post.body);\n  data.append(\"health[photo]\", post.photo);\n  let resp = await fetch(\"http://localhost:4000/api/v1/healths/\" + post.id, {\n    method: \"PATCH\",\n    body: data\n  });\n  return await resp.json();\n}\nexport async function delete_wellness(id) {\n  let data = new FormData();\n  data.append(\"id\", id);\n  fetch(\"http://localhost:4000/api/v1/healths/\" + id, {\n    method: 'DELETE',\n    body: data\n  }).then(resp => {\n    if (!resp.ok) {\n      let action = {\n        type: 'error/set',\n        data: 'Unable to delete event.'\n      };\n      store.dispatch(action);\n    } else {\n      fetch_wellness();\n    }\n  });\n}\nexport async function update_wellness_vote(post, user_id, action) {\n  let data = new FormData();\n  data.append(\"health[user_id]\", post.user_id);\n  data.append(\"health[title]\", post.title);\n  data.append(\"health[body]\", post.body);\n  let votes = post.votes;\n\n  if (action == \"increase\") {\n    votes.push(user_id);\n  } else {\n    votes = votes.filter(function (e) {\n      return e != user_id;\n    });\n    console.log(votes);\n  }\n\n  data.append(\"health[votes]\", JSON.stringify(votes));\n\n  if (post.photo === \"undefined\") {\n    post[\"photo\"] = \"\";\n  }\n\n  data.append(\"health[photo]\", post.photo);\n  let resp = await fetch(\"http://localhost:4000/api/v1/healths/\" + post.id, {\n    method: \"PATCH\",\n    body: data\n  });\n  return await resp.json();\n}\nexport function fetch_score(id) {\n  api_get(\"/healths/\" + id).then(data => {\n    store.dispatch({\n      type: 'score/set',\n      data: data.votes.length\n    });\n  });\n}\nexport function search_wellness(search) {\n  api_get(\"/healths\").then(data => {\n    data = sortWellness(data);\n    data = handle_wellness_search(search, data);\n    store.dispatch({\n      type: 'wellness/set',\n      data: data\n    });\n  });\n}\n\nfunction handle_wellness_search(search, data) {\n  if (search == \"\") {\n    data = sortWellness(data);\n    return data;\n  } else {\n    let result = [];\n\n    for (let [key, value] of Object.entries(data)) {\n      if (value.title.includes(search) || value.body.includes(search)) {\n        result.push(value);\n      }\n    }\n\n    result = sortWellness(result);\n    return result;\n  }\n}\n\nfunction sortWellness(data) {\n  return data.sort(function (a, b) {\n    return b.votes.length - a.votes.length;\n  });\n} //---------------------------login------------------------------------\n\n\nexport function api_login(email, password) {\n  api_post(\"/session\", {\n    email,\n    password\n  }).then(data => {\n    if (data.session) {\n      let action = {\n        type: 'session/set',\n        data: data.session\n      };\n      store.dispatch(action);\n    } else if (data.error) {\n      let action = {\n        type: 'error/set',\n        data: data.error\n      };\n      store.dispatch(action);\n    }\n  });\n}\nexport function fetch_reason(reason) {\n  switch (reason) {\n    case \"Cat Wellness\":\n      return \"/wellness/list\";\n      break;\n\n    case \"Breeder/Adoption\":\n      return \"/selladopt\";\n      break;\n\n    case \"Lost/Found Cats\":\n      return \"/lostfound\";\n      break;\n\n    case \"Food Choices/Recommendations\":\n      return \"/food\";\n      break;\n\n    case \"Other\":\n      return \"/forum\";\n      break;\n\n    default:\n      return \"/\";\n  }\n}\nexport function load_defaults() {\n  fetch_users();\n  fetch_wellness();\n}","map":{"version":3,"sources":["/media/psf/Home/Desktop/CS4550-FinalProject/web/src/api.js"],"names":["store","api_get","path","text","fetch","resp","json","data","api_post","opts","method","headers","body","JSON","stringify","fetch_comments","health_id","then","result","key","value","Object","entries","push","console","log","dispatch","type","create_comment","comment","user_id","fetch_users","fetch_user","id","create_user","user","FormData","append","name","email","password","reason","photo","update_user","fetch_wellness","sortWellness","fetch_single_wellness","create_wellness","post","title","update_wellness","delete_wellness","ok","action","update_wellness_vote","votes","filter","e","fetch_score","length","search_wellness","search","handle_wellness_search","includes","sort","a","b","api_login","session","error","fetch_reason","load_defaults"],"mappings":"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","sourcesContent":["import store from './store';\n\nasync function api_get(path) {\n  let text = await fetch(\n    \"http://localhost:4000/api/v1\" + path, {});\n  let resp = await text.json();\n  return resp.data;\n}\n\nasync function api_post(path, data) {\n  let opts = {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json'\n    },\n    body: JSON.stringify(data),\n  };\n  let text = await fetch(\n    \"http://localhost:4000/api/v1\" + path, opts);\n  return await text.json();\n}\n//----------------------Wellness Comments -----------------------\nexport function fetch_comments(health_id) {\n  api_get(\"/comments\").then((data) => {\n    let result = []\n    for (let [key, value] of Object.entries(data)) {\n      if (value.health_id == health_id) {\n        result.push(value)\n      }\n    }\n    console.log(result)\n    store.dispatch({\n    type: 'comments/set',\n    data: result,\n  })})\n}\n\nexport async function create_comment(comment, user_id, health_id) {\n\n}\n\n//---------------------user--------------------------------------\nexport function fetch_users() {\n    api_get(\"/users\").then((data) => store.dispatch({\n        type: 'users/set',\n        data: data,\n    }));\n}\n\nexport function fetch_user(id) {\n  api_get(\"/users/\" + id).then((data) => store.dispatch({\n      type: 'user_form/set',\n      data: data,\n  }));\n}\n\nexport async function create_user(user) {\n  console.log(user)\n  let data = new FormData();\n  data.append(\"user[name]\", user.name);\n  data.append(\"user[email]\", user.email);\n  data.append(\"user[password]\", user.password);\n  data.append(\"user[reason]\", user.reason);\n  console.log(data)\n  if (user.photo === \"undefined\") {\n    user[\"photo\"] = \"\";\n  }\n  data.append(\"user[photo]\", user.photo);\n  let resp = await fetch(\"http://localhost:4000/api/v1/users\", {\n    method: \"POST\",\n    body: data,\n  })\nreturn await resp.json();\n}\n\nexport async function update_user(user) {\n  let data = new FormData();\n  data.append(\"user_id\", user.id);\n  data.append(\"user[name]\", user.name);\n  data.append(\"user[email]\", user.email);\n  data.append(\"user[password]\", user.password);\n  data.append(\"user[reason]\", user.reason);\n  data.append(\"user[photo]\", user.photo);\n  let resp = await fetch(\"http://localhost:4000/api/v1/users/\" + user.id, {\n    method: \"PATCH\",\n    body: data,\n  })\nreturn await resp.json();\n}\n//---------------------wellness page-----------------------------------\nexport function fetch_wellness() {\n  api_get(\"/healths\").then((data) => {\n  data = sortWellness(data)\n  store.dispatch({\n    type: 'wellness/set',\n    data: data,\n  })});\n}\n\n\nexport function fetch_single_wellness(id) {\n  api_get(\"/healths/\"+id).then((data) => store.dispatch({\n    type: 'wellness_form/set',\n    data: data,\n  }));\n}\n\nexport async function create_wellness(post) {\n  let data = new FormData();\n  data.append(\"health[user_id]\", post.user_id);\n  data.append(\"health[title]\", post.title);\n  data.append(\"health[body]\", post.body);\n  data.append(\"health[votes]\", JSON.stringify([]))\n  if (post.photo === \"undefined\") {\n    post[\"photo\"] = \"\";\n  }\n  data.append(\"health[photo]\", post.photo);\n  let resp = await fetch(\"http://localhost:4000/api/v1/healths\", {\n    method: \"POST\",\n    body: data,\n  })\nreturn await resp.json();\n}\n\nexport async function update_wellness(post) {\n  let data = new FormData();\n  data.append(\"health[user_id]\", post.user_id);\n  data.append(\"health[title]\", post.title);\n  data.append(\"health[body]\", post.body);\n  data.append(\"health[photo]\", post.photo);\n  let resp = await fetch(\"http://localhost:4000/api/v1/healths/\" + post.id, {\n    method: \"PATCH\",\n    body: data,\n  })\nreturn await resp.json();\n}\n\nexport async function delete_wellness(id) {\n  let data = new FormData();\n  data.append(\"id\", id);\n  fetch(\"http://localhost:4000/api/v1/healths/\" + id, {\n    method: 'DELETE',\n    body: data,\n  }).then((resp) => {\n    if(!resp.ok){\n      let action = {\n        type: 'error/set',\n        data: 'Unable to delete event.',\n      };\n      store.dispatch(action);\n    }else {\n      fetch_wellness();\n    }\n  });\n}\n\nexport async function update_wellness_vote(post, user_id, action) {\n  let data = new FormData();\n  data.append(\"health[user_id]\", post.user_id);\n  data.append(\"health[title]\", post.title);\n  data.append(\"health[body]\", post.body);\n  let votes = post.votes\n  if (action == \"increase\") {\n    votes.push(user_id)\n  }\n  else {\n    votes = votes.filter(function(e) { return e != user_id })\n    console.log(votes)\n  }\n  data.append(\"health[votes]\", JSON.stringify(votes))\n  if (post.photo === \"undefined\") {\n    post[\"photo\"] = \"\";\n  }\n  data.append(\"health[photo]\", post.photo);\n  let resp = await fetch(\"http://localhost:4000/api/v1/healths/\" + post.id, {\n    method: \"PATCH\",\n    body: data,\n  })\nreturn await resp.json();\n}\n\nexport function fetch_score(id) {\n  api_get(\"/healths/\"+id).then((data) => {\n  store.dispatch({\n    type: 'score/set',\n    data: data.votes.length,\n  })});\n}\n\nexport function search_wellness(search) {\n  api_get(\"/healths\").then((data) => {\n  data = sortWellness(data)\n  data = handle_wellness_search(search, data)\n  store.dispatch({\n    type: 'wellness/set',\n    data: data,\n  })});\n}\n\nfunction handle_wellness_search(search, data) {\n  if (search == \"\") {\n    data = sortWellness(data)\n    return data\n  }\n  else {\n    let result = []\n    for (let [key, value] of Object.entries(data)) {\n      if (value.title.includes(search) || value.body.includes(search)) {\n        result.push(value)\n      }\n    }\n    result = sortWellness(result)\n    return result\n  }\n}\n\nfunction sortWellness(data) {\n  return data.sort(function(a, b){\n    return b.votes.length - a.votes.length});\n}\n\n//---------------------------login------------------------------------\nexport function api_login(email, password) {\n  api_post(\"/session\", {email, password}).then((data) => {\n    if (data.session) {\n      let action = {\n        type: 'session/set',\n        data: data.session,\n      }\n      store.dispatch(action);\n    }\n    else if (data.error) {\n     let action = {\n        type: 'error/set',\n        data: data.error,\n      }\n      store.dispatch(action);\n    }\n  });\n}\n\nexport function fetch_reason(reason) {\n  switch(reason){\n    case \"Cat Wellness\":\n      return \"/wellness/list\"\n      break;\n    case \"Breeder/Adoption\":\n      return \"/selladopt\"\n      break;\n    case \"Lost/Found Cats\":\n      return \"/lostfound\"\n      break;\n    case \"Food Choices/Recommendations\":\n      return \"/food\"\n      break;\n    case \"Other\":\n      return \"/forum\"\n      break;\n    default:\n      return \"/\"\n    }\n}\nexport function load_defaults() {\n  fetch_users();\n  fetch_wellness();\n}\n"]},"metadata":{},"sourceType":"module"}