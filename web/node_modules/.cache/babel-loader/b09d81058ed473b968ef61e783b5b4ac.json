{"ast":null,"code":"import store from './store';\n\nasync function api_get(path) {\n  let text = await fetch(\"http://localhost:4000/api/v1\" + path, {});\n  let resp = await text.json();\n  return resp.data;\n}\n\nasync function api_post(path, data) {\n  let opts = {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json'\n    },\n    body: JSON.stringify(data)\n  };\n  let text = await fetch(\"http://localhost:4000/api/v1\" + path, opts);\n  return await text.json();\n}\n\nexport function fetch_users() {\n  api_get(\"/users\").then(data => store.dispatch({\n    type: 'users/set',\n    data: data\n  }));\n}\nexport function api_login(email, password) {\n  api_post(\"/session\", {\n    email,\n    password\n  }).then(data => {\n    console.log(fetch_user(data.session.user_id));\n\n    if (data.session) {\n      let action = {\n        type: 'session/set',\n        data: data.session\n      };\n      store.dispatch(action);\n    } else if (data.error) {\n      let action = {\n        type: 'error/set',\n        data: data.error\n      };\n      store.dispatch(action);\n    }\n  });\n}\nexport function fetch_user(id) {\n  return api_get(\"/users/${id}\").then(data => {\n    console.log(data);\n\n    if (data) {\n      store.dispatch({\n        type: \"user_form/set\",\n        data: data\n      });\n    } else {\n      let action = {\n        type: 'error/set',\n        data: data.error\n      };\n      store.dispatch(action);\n    }\n  });\n}\nexport function create_user(user) {\n  return api_post(\"/users\", {\n    user\n  });\n}\nexport function load_defaults() {\n  fetch_users();\n}","map":{"version":3,"sources":["/media/psf/Home/Desktop/CS4550-FinalProject/web/src/api.js"],"names":["store","api_get","path","text","fetch","resp","json","data","api_post","opts","method","headers","body","JSON","stringify","fetch_users","then","dispatch","type","api_login","email","password","console","log","fetch_user","session","user_id","action","error","id","create_user","user","load_defaults"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,SAAlB;;AAEA,eAAeC,OAAf,CAAuBC,IAAvB,EAA6B;AAC3B,MAAIC,IAAI,GAAG,MAAMC,KAAK,CACpB,iCAAiCF,IADb,EACmB,EADnB,CAAtB;AAEA,MAAIG,IAAI,GAAG,MAAMF,IAAI,CAACG,IAAL,EAAjB;AACA,SAAOD,IAAI,CAACE,IAAZ;AACD;;AAED,eAAeC,QAAf,CAAwBN,IAAxB,EAA8BK,IAA9B,EAAoC;AAClC,MAAIE,IAAI,GAAG;AACTC,IAAAA,MAAM,EAAE,MADC;AAETC,IAAAA,OAAO,EAAE;AACP,sBAAgB;AADT,KAFA;AAKTC,IAAAA,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAeP,IAAf;AALG,GAAX;AAOA,MAAIJ,IAAI,GAAG,MAAMC,KAAK,CACpB,iCAAiCF,IADb,EACmBO,IADnB,CAAtB;AAEA,SAAO,MAAMN,IAAI,CAACG,IAAL,EAAb;AACD;;AAED,OAAO,SAASS,WAAT,GAAuB;AAC1Bd,EAAAA,OAAO,CAAC,QAAD,CAAP,CAAkBe,IAAlB,CAAwBT,IAAD,IAAUP,KAAK,CAACiB,QAAN,CAAe;AAC5CC,IAAAA,IAAI,EAAE,WADsC;AAE5CX,IAAAA,IAAI,EAAEA;AAFsC,GAAf,CAAjC;AAIH;AAED,OAAO,SAASY,SAAT,CAAmBC,KAAnB,EAA0BC,QAA1B,EAAoC;AACzCb,EAAAA,QAAQ,CAAC,UAAD,EAAa;AAACY,IAAAA,KAAD;AAAQC,IAAAA;AAAR,GAAb,CAAR,CAAwCL,IAAxC,CAA8CT,IAAD,IAAU;AACrDe,IAAAA,OAAO,CAACC,GAAR,CAAYC,UAAU,CAACjB,IAAI,CAACkB,OAAL,CAAaC,OAAd,CAAtB;;AACA,QAAInB,IAAI,CAACkB,OAAT,EAAkB;AAChB,UAAIE,MAAM,GAAG;AACXT,QAAAA,IAAI,EAAE,aADK;AAEXX,QAAAA,IAAI,EAAEA,IAAI,CAACkB;AAFA,OAAb;AAIAzB,MAAAA,KAAK,CAACiB,QAAN,CAAeU,MAAf;AACD,KAND,MAOK,IAAIpB,IAAI,CAACqB,KAAT,EAAgB;AACpB,UAAID,MAAM,GAAG;AACVT,QAAAA,IAAI,EAAE,WADI;AAEVX,QAAAA,IAAI,EAAEA,IAAI,CAACqB;AAFD,OAAb;AAIC5B,MAAAA,KAAK,CAACiB,QAAN,CAAeU,MAAf;AACD;AACF,GAhBD;AAiBD;AAED,OAAO,SAASH,UAAT,CAAoBK,EAApB,EAAwB;AAC7B,SAAO5B,OAAO,CAAC,cAAD,CAAP,CAAwBe,IAAxB,CAA8BT,IAAD,IAAU;AAC5Ce,IAAAA,OAAO,CAACC,GAAR,CAAYhB,IAAZ;;AACA,QAAIA,IAAJ,EAAU;AACRP,MAAAA,KAAK,CAACiB,QAAN,CAAe;AACbC,QAAAA,IAAI,EAAE,eADO;AAEbX,QAAAA,IAAI,EAAEA;AAFO,OAAf;AAID,KALD,MAMK;AACH,UAAIoB,MAAM,GAAG;AACVT,QAAAA,IAAI,EAAE,WADI;AAEVX,QAAAA,IAAI,EAAEA,IAAI,CAACqB;AAFD,OAAb;AAIC5B,MAAAA,KAAK,CAACiB,QAAN,CAAeU,MAAf;AACF;AACF,GAfM,CAAP;AAgBD;AAED,OAAO,SAASG,WAAT,CAAqBC,IAArB,EAA2B;AAChC,SAAOvB,QAAQ,CAAC,QAAD,EAAW;AAACuB,IAAAA;AAAD,GAAX,CAAf;AACD;AAED,OAAO,SAASC,aAAT,GAAyB;AAC9BjB,EAAAA,WAAW;AACZ","sourcesContent":["import store from './store';\n\nasync function api_get(path) {\n  let text = await fetch(\n    \"http://localhost:4000/api/v1\" + path, {});\n  let resp = await text.json();\n  return resp.data;\n}\n\nasync function api_post(path, data) {\n  let opts = {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json'\n    },\n    body: JSON.stringify(data),\n  };\n  let text = await fetch(\n    \"http://localhost:4000/api/v1\" + path, opts);\n  return await text.json();\n}\n\nexport function fetch_users() {\n    api_get(\"/users\").then((data) => store.dispatch({\n        type: 'users/set',\n        data: data,\n    }));\n}\n\nexport function api_login(email, password) {\n  api_post(\"/session\", {email, password}).then((data) => {\n    console.log(fetch_user(data.session.user_id))\n    if (data.session) {\n      let action = {\n        type: 'session/set',\n        data: data.session,\n      }\n      store.dispatch(action);\n    }\n    else if (data.error) {\n     let action = {\n        type: 'error/set',\n        data: data.error,\n      }\n      store.dispatch(action);\n    }\n  });\n}\n\nexport function fetch_user(id) {\n  return api_get(\"/users/${id}\").then((data) => {\n    console.log(data)\n    if (data) {\n      store.dispatch({\n        type: \"user_form/set\",\n        data: data\n      });\n    }\n    else {\n      let action = {\n         type: 'error/set',\n         data: data.error,\n       }\n       store.dispatch(action);\n    }\n  })\n}\n\nexport function create_user(user) {\n  return api_post(\"/users\", {user});\n}\n\nexport function load_defaults() {\n  fetch_users();\n}\n"]},"metadata":{},"sourceType":"module"}