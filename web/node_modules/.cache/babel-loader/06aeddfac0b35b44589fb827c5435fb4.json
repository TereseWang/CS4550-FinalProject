{"ast":null,"code":"import store from './store';\n\nasync function api_get(path) {\n  let text = await fetch(\"http://localhost:4000/api/v1\" + path, {});\n  let resp = await text.json();\n  return resp.data;\n}\n\nasync function api_post(path, data) {\n  let opts = {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json'\n    },\n    body: JSON.stringify(data)\n  };\n  let text = await fetch(\"http://localhost:4000/api/v1\" + path, opts);\n  return await text.json();\n}\n\nexport function fetch_health_vote(health_id) {\n  api_get(\"/votes\").then(data => {\n    var result;\n\n    for (let [key, value] of Object.entries(data)) {\n      if (value.health_id == health_id) {\n        result = value;\n        console.log(value);\n        break;\n      }\n    }\n\n    store.dispatch({\n      type: 'health_vote/single',\n      data: result\n    });\n  });\n}\nexport function fetch_users() {\n  api_get(\"/users\").then(data => store.dispatch({\n    type: 'users/set',\n    data: data\n  }));\n}\nexport function fetch_user(id) {\n  api_get(\"/users/\" + id).then(data => store.dispatch({\n    type: 'users/single',\n    data: data\n  }));\n}\n\nfunction sortWellness(data) {\n  return data.sort(function (a, b) {\n    return a.id - b.id;\n  });\n}\n\nexport function fetch_wellness() {\n  api_get(\"/healths\").then(data => {\n    data = sortWellness(data);\n    store.dispatch({\n      type: 'wellness/set',\n      data: data\n    });\n  });\n}\n\nfunction handle_wellness_search(search, data) {\n  if (search == \"\") {\n    return data;\n  } else {\n    let result = [];\n\n    for (let [key, value] of Object.entries(data)) {\n      if (value.title.includes(search) || value.body.includes(search)) {\n        result.push(value);\n      }\n    }\n\n    return result;\n  }\n}\n\nexport function search_wellness(search) {\n  api_get(\"/healths\").then(data => {\n    data = sortWellness(data);\n    data = handle_wellness_search(search, data);\n    store.dispatch({\n      type: 'wellness/set',\n      data: data\n    });\n  });\n}\nexport function fetch_single_wellness(id) {\n  api_get(\"/healths/\" + id).then(data => store.dispatch({\n    type: 'wellness/single',\n    data: data\n  }));\n}\nexport function api_login(email, password) {\n  api_post(\"/session\", {\n    email,\n    password\n  }).then(data => {\n    if (data.session) {\n      let action = {\n        type: 'session/set',\n        data: data.session\n      };\n      store.dispatch(action);\n    } else if (data.error) {\n      let action = {\n        type: 'error/set',\n        data: data.error\n      };\n      store.dispatch(action);\n    }\n  });\n}\nexport async function create_user(user) {\n  let data = new FormData();\n  data.append(\"user[name]\", user.name);\n  data.append(\"user[email]\", user.email);\n  data.append(\"user[password]\", user.password);\n  data.append(\"user[reason]\", user.reason);\n\n  if (user.photo === \"undefined\") {\n    user[\"photo\"] = \"\";\n  }\n\n  data.append(\"user[photo]\", user.photo);\n  let resp = await fetch(\"http://localhost:4000/api/v1/users\", {\n    method: \"POST\",\n    body: data\n  });\n  return await resp.json();\n}\nexport async function update_user(user) {\n  let data = new FormData();\n  data.append(\"user_id\", user.id);\n  data.append(\"user[name]\", user.name);\n  data.append(\"user[email]\", user.email);\n  data.append(\"user[password]\", user.password);\n  data.append(\"user[reason]\", user.reason);\n  data.append(\"user[photo]\", user.photo);\n  let resp = await fetch(\"http://localhost:4000/api/v1/users/\" + user.id, {\n    method: \"PATCH\",\n    body: data\n  });\n  return await resp.json();\n}\nexport async function update_wellness(post) {\n  let data = new FormData();\n  data.append(\"health[user_id]\", post.user_id);\n  data.append(\"health[title]\", post.title);\n  data.append(\"health[body]\", post.body);\n  data.append(\"health[photo]\", post.photo);\n  let resp = await fetch(\"http://localhost:4000/api/v1/healths/\" + post.id, {\n    method: \"PATCH\",\n    body: data\n  });\n  return await resp.json();\n}\nexport async function create_wellness(post) {\n  let data = new FormData();\n  data.append(\"health[user_id]\", post.user_id);\n  data.append(\"health[title]\", post.title);\n  data.append(\"health[body]\", post.body);\n\n  if (post.photo === \"undefined\") {\n    post[\"photo\"] = \"\";\n  }\n\n  data.append(\"health[photo]\", post.photo);\n  let resp = await fetch(\"http://localhost:4000/api/v1/healths\", {\n    method: \"POST\",\n    body: data\n  });\n  return await resp.json();\n}\nexport function fetch_reason(reason) {\n  switch (reason) {\n    case \"Cat Wellness\":\n      return \"/wellness/list\";\n      break;\n\n    case \"Breeder/Adoption\":\n      return \"/selladopt\";\n      break;\n\n    case \"Lost/Found Cats\":\n      return \"/lostfound\";\n      break;\n\n    case \"Food Choices/Recommendations\":\n      return \"/food\";\n      break;\n\n    case \"Other\":\n      return \"/forum\";\n      break;\n\n    default:\n      return \"/\";\n  }\n}\nexport function load_defaults() {\n  fetch_users();\n  fetch_wellness();\n}","map":{"version":3,"sources":["/media/psf/Home/Desktop/CS4550-FinalProject/web/src/api.js"],"names":["store","api_get","path","text","fetch","resp","json","data","api_post","opts","method","headers","body","JSON","stringify","fetch_health_vote","health_id","then","result","key","value","Object","entries","console","log","dispatch","type","fetch_users","fetch_user","id","sortWellness","sort","a","b","fetch_wellness","handle_wellness_search","search","title","includes","push","search_wellness","fetch_single_wellness","api_login","email","password","session","action","error","create_user","user","FormData","append","name","reason","photo","update_user","update_wellness","post","user_id","create_wellness","fetch_reason","load_defaults"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,SAAlB;;AAEA,eAAeC,OAAf,CAAuBC,IAAvB,EAA6B;AAC3B,MAAIC,IAAI,GAAG,MAAMC,KAAK,CACpB,iCAAiCF,IADb,EACmB,EADnB,CAAtB;AAEA,MAAIG,IAAI,GAAG,MAAMF,IAAI,CAACG,IAAL,EAAjB;AACA,SAAOD,IAAI,CAACE,IAAZ;AACD;;AAED,eAAeC,QAAf,CAAwBN,IAAxB,EAA8BK,IAA9B,EAAoC;AAClC,MAAIE,IAAI,GAAG;AACTC,IAAAA,MAAM,EAAE,MADC;AAETC,IAAAA,OAAO,EAAE;AACP,sBAAgB;AADT,KAFA;AAKTC,IAAAA,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAeP,IAAf;AALG,GAAX;AAOA,MAAIJ,IAAI,GAAG,MAAMC,KAAK,CACpB,iCAAiCF,IADb,EACmBO,IADnB,CAAtB;AAEA,SAAO,MAAMN,IAAI,CAACG,IAAL,EAAb;AACD;;AAED,OAAO,SAASS,iBAAT,CAA2BC,SAA3B,EAAsC;AAC3Cf,EAAAA,OAAO,CAAC,QAAD,CAAP,CAAkBgB,IAAlB,CAAwBV,IAAD,IAAU;AAC/B,QAAIW,MAAJ;;AACA,SAAK,IAAI,CAACC,GAAD,EAAMC,KAAN,CAAT,IAAyBC,MAAM,CAACC,OAAP,CAAef,IAAf,CAAzB,EAA+C;AAC7C,UAAIa,KAAK,CAACJ,SAAN,IAAmBA,SAAvB,EAAkC;AAChCE,QAAAA,MAAM,GAAGE,KAAT;AACAG,QAAAA,OAAO,CAACC,GAAR,CAAYJ,KAAZ;AACA;AACD;AACF;;AACDpB,IAAAA,KAAK,CAACyB,QAAN,CAAe;AACfC,MAAAA,IAAI,EAAE,oBADS;AAEfnB,MAAAA,IAAI,EAAEW;AAFS,KAAf;AAGC,GAZH;AAaD;AAED,OAAO,SAASS,WAAT,GAAuB;AAC1B1B,EAAAA,OAAO,CAAC,QAAD,CAAP,CAAkBgB,IAAlB,CAAwBV,IAAD,IAAUP,KAAK,CAACyB,QAAN,CAAe;AAC5CC,IAAAA,IAAI,EAAE,WADsC;AAE5CnB,IAAAA,IAAI,EAAEA;AAFsC,GAAf,CAAjC;AAIH;AAED,OAAO,SAASqB,UAAT,CAAoBC,EAApB,EAAwB;AAC7B5B,EAAAA,OAAO,CAAC,YAAY4B,EAAb,CAAP,CAAwBZ,IAAxB,CAA8BV,IAAD,IAAUP,KAAK,CAACyB,QAAN,CAAe;AACpDC,IAAAA,IAAI,EAAE,cAD8C;AAEpDnB,IAAAA,IAAI,EAAEA;AAF8C,GAAf,CAAvC;AAID;;AAED,SAASuB,YAAT,CAAsBvB,IAAtB,EAA4B;AAC1B,SAAOA,IAAI,CAACwB,IAAL,CAAU,UAASC,CAAT,EAAYC,CAAZ,EAAc;AAC7B,WAAOD,CAAC,CAACH,EAAF,GAAOI,CAAC,CAACJ,EAAhB;AAAmB,GADd,CAAP;AAED;;AAED,OAAO,SAASK,cAAT,GAA0B;AAC/BjC,EAAAA,OAAO,CAAC,UAAD,CAAP,CAAoBgB,IAApB,CAA0BV,IAAD,IAAU;AACnCA,IAAAA,IAAI,GAAGuB,YAAY,CAACvB,IAAD,CAAnB;AACAP,IAAAA,KAAK,CAACyB,QAAN,CAAe;AACbC,MAAAA,IAAI,EAAE,cADO;AAEbnB,MAAAA,IAAI,EAAEA;AAFO,KAAf;AAGG,GALH;AAMD;;AAED,SAAS4B,sBAAT,CAAgCC,MAAhC,EAAwC7B,IAAxC,EAA8C;AAC5C,MAAI6B,MAAM,IAAI,EAAd,EAAkB;AAChB,WAAO7B,IAAP;AACD,GAFD,MAGK;AACH,QAAIW,MAAM,GAAG,EAAb;;AACA,SAAK,IAAI,CAACC,GAAD,EAAMC,KAAN,CAAT,IAAyBC,MAAM,CAACC,OAAP,CAAef,IAAf,CAAzB,EAA+C;AAC7C,UAAIa,KAAK,CAACiB,KAAN,CAAYC,QAAZ,CAAqBF,MAArB,KAAgChB,KAAK,CAACR,IAAN,CAAW0B,QAAX,CAAoBF,MAApB,CAApC,EAAiE;AAC/DlB,QAAAA,MAAM,CAACqB,IAAP,CAAYnB,KAAZ;AACD;AACF;;AACD,WAAOF,MAAP;AACD;AACF;;AAGD,OAAO,SAASsB,eAAT,CAAyBJ,MAAzB,EAAiC;AACtCnC,EAAAA,OAAO,CAAC,UAAD,CAAP,CAAoBgB,IAApB,CAA0BV,IAAD,IAAU;AACnCA,IAAAA,IAAI,GAAGuB,YAAY,CAACvB,IAAD,CAAnB;AACAA,IAAAA,IAAI,GAAG4B,sBAAsB,CAACC,MAAD,EAAS7B,IAAT,CAA7B;AACAP,IAAAA,KAAK,CAACyB,QAAN,CAAe;AACbC,MAAAA,IAAI,EAAE,cADO;AAEbnB,MAAAA,IAAI,EAAEA;AAFO,KAAf;AAGG,GANH;AAOD;AAED,OAAO,SAASkC,qBAAT,CAA+BZ,EAA/B,EAAmC;AACxC5B,EAAAA,OAAO,CAAC,cAAc4B,EAAf,CAAP,CAA0BZ,IAA1B,CAAgCV,IAAD,IAAUP,KAAK,CAACyB,QAAN,CAAe;AACtDC,IAAAA,IAAI,EAAE,iBADgD;AAEtDnB,IAAAA,IAAI,EAAEA;AAFgD,GAAf,CAAzC;AAID;AAED,OAAO,SAASmC,SAAT,CAAmBC,KAAnB,EAA0BC,QAA1B,EAAoC;AACzCpC,EAAAA,QAAQ,CAAC,UAAD,EAAa;AAACmC,IAAAA,KAAD;AAAQC,IAAAA;AAAR,GAAb,CAAR,CAAwC3B,IAAxC,CAA8CV,IAAD,IAAU;AACrD,QAAIA,IAAI,CAACsC,OAAT,EAAkB;AAChB,UAAIC,MAAM,GAAG;AACXpB,QAAAA,IAAI,EAAE,aADK;AAEXnB,QAAAA,IAAI,EAAEA,IAAI,CAACsC;AAFA,OAAb;AAIA7C,MAAAA,KAAK,CAACyB,QAAN,CAAeqB,MAAf;AACD,KAND,MAOK,IAAIvC,IAAI,CAACwC,KAAT,EAAgB;AACpB,UAAID,MAAM,GAAG;AACVpB,QAAAA,IAAI,EAAE,WADI;AAEVnB,QAAAA,IAAI,EAAEA,IAAI,CAACwC;AAFD,OAAb;AAIC/C,MAAAA,KAAK,CAACyB,QAAN,CAAeqB,MAAf;AACD;AACF,GAfD;AAgBD;AAED,OAAO,eAAeE,WAAf,CAA2BC,IAA3B,EAAiC;AACtC,MAAI1C,IAAI,GAAG,IAAI2C,QAAJ,EAAX;AACA3C,EAAAA,IAAI,CAAC4C,MAAL,CAAY,YAAZ,EAA0BF,IAAI,CAACG,IAA/B;AACA7C,EAAAA,IAAI,CAAC4C,MAAL,CAAY,aAAZ,EAA2BF,IAAI,CAACN,KAAhC;AACApC,EAAAA,IAAI,CAAC4C,MAAL,CAAY,gBAAZ,EAA8BF,IAAI,CAACL,QAAnC;AACArC,EAAAA,IAAI,CAAC4C,MAAL,CAAY,cAAZ,EAA4BF,IAAI,CAACI,MAAjC;;AACA,MAAIJ,IAAI,CAACK,KAAL,KAAe,WAAnB,EAAgC;AAC9BL,IAAAA,IAAI,CAAC,OAAD,CAAJ,GAAgB,EAAhB;AACD;;AACD1C,EAAAA,IAAI,CAAC4C,MAAL,CAAY,aAAZ,EAA2BF,IAAI,CAACK,KAAhC;AACA,MAAIjD,IAAI,GAAG,MAAMD,KAAK,CAAC,oCAAD,EAAuC;AAC3DM,IAAAA,MAAM,EAAE,MADmD;AAE3DE,IAAAA,IAAI,EAAEL;AAFqD,GAAvC,CAAtB;AAIF,SAAO,MAAMF,IAAI,CAACC,IAAL,EAAb;AACC;AAED,OAAO,eAAeiD,WAAf,CAA2BN,IAA3B,EAAiC;AACtC,MAAI1C,IAAI,GAAG,IAAI2C,QAAJ,EAAX;AACA3C,EAAAA,IAAI,CAAC4C,MAAL,CAAY,SAAZ,EAAuBF,IAAI,CAACpB,EAA5B;AACAtB,EAAAA,IAAI,CAAC4C,MAAL,CAAY,YAAZ,EAA0BF,IAAI,CAACG,IAA/B;AACA7C,EAAAA,IAAI,CAAC4C,MAAL,CAAY,aAAZ,EAA2BF,IAAI,CAACN,KAAhC;AACApC,EAAAA,IAAI,CAAC4C,MAAL,CAAY,gBAAZ,EAA8BF,IAAI,CAACL,QAAnC;AACArC,EAAAA,IAAI,CAAC4C,MAAL,CAAY,cAAZ,EAA4BF,IAAI,CAACI,MAAjC;AACA9C,EAAAA,IAAI,CAAC4C,MAAL,CAAY,aAAZ,EAA2BF,IAAI,CAACK,KAAhC;AACA,MAAIjD,IAAI,GAAG,MAAMD,KAAK,CAAC,wCAAwC6C,IAAI,CAACpB,EAA9C,EAAkD;AACtEnB,IAAAA,MAAM,EAAE,OAD8D;AAEtEE,IAAAA,IAAI,EAAEL;AAFgE,GAAlD,CAAtB;AAIF,SAAO,MAAMF,IAAI,CAACC,IAAL,EAAb;AACC;AAED,OAAO,eAAekD,eAAf,CAA+BC,IAA/B,EAAqC;AAC1C,MAAIlD,IAAI,GAAG,IAAI2C,QAAJ,EAAX;AACA3C,EAAAA,IAAI,CAAC4C,MAAL,CAAY,iBAAZ,EAA+BM,IAAI,CAACC,OAApC;AACAnD,EAAAA,IAAI,CAAC4C,MAAL,CAAY,eAAZ,EAA6BM,IAAI,CAACpB,KAAlC;AACA9B,EAAAA,IAAI,CAAC4C,MAAL,CAAY,cAAZ,EAA4BM,IAAI,CAAC7C,IAAjC;AACAL,EAAAA,IAAI,CAAC4C,MAAL,CAAY,eAAZ,EAA6BM,IAAI,CAACH,KAAlC;AACA,MAAIjD,IAAI,GAAG,MAAMD,KAAK,CAAC,0CAA0CqD,IAAI,CAAC5B,EAAhD,EAAoD;AACxEnB,IAAAA,MAAM,EAAE,OADgE;AAExEE,IAAAA,IAAI,EAAEL;AAFkE,GAApD,CAAtB;AAIF,SAAO,MAAMF,IAAI,CAACC,IAAL,EAAb;AACC;AAGD,OAAO,eAAeqD,eAAf,CAA+BF,IAA/B,EAAqC;AAC1C,MAAIlD,IAAI,GAAG,IAAI2C,QAAJ,EAAX;AACA3C,EAAAA,IAAI,CAAC4C,MAAL,CAAY,iBAAZ,EAA+BM,IAAI,CAACC,OAApC;AACAnD,EAAAA,IAAI,CAAC4C,MAAL,CAAY,eAAZ,EAA6BM,IAAI,CAACpB,KAAlC;AACA9B,EAAAA,IAAI,CAAC4C,MAAL,CAAY,cAAZ,EAA4BM,IAAI,CAAC7C,IAAjC;;AACA,MAAI6C,IAAI,CAACH,KAAL,KAAe,WAAnB,EAAgC;AAC9BG,IAAAA,IAAI,CAAC,OAAD,CAAJ,GAAgB,EAAhB;AACD;;AACDlD,EAAAA,IAAI,CAAC4C,MAAL,CAAY,eAAZ,EAA6BM,IAAI,CAACH,KAAlC;AACA,MAAIjD,IAAI,GAAG,MAAMD,KAAK,CAAC,sCAAD,EAAyC;AAC7DM,IAAAA,MAAM,EAAE,MADqD;AAE7DE,IAAAA,IAAI,EAAEL;AAFuD,GAAzC,CAAtB;AAIF,SAAO,MAAMF,IAAI,CAACC,IAAL,EAAb;AACC;AAED,OAAO,SAASsD,YAAT,CAAsBP,MAAtB,EAA8B;AACnC,UAAOA,MAAP;AACE,SAAK,cAAL;AACE,aAAO,gBAAP;AACA;;AACF,SAAK,kBAAL;AACE,aAAO,YAAP;AACA;;AACF,SAAK,iBAAL;AACE,aAAO,YAAP;AACA;;AACF,SAAK,8BAAL;AACE,aAAO,OAAP;AACA;;AACF,SAAK,OAAL;AACE,aAAO,QAAP;AACA;;AACF;AACE,aAAO,GAAP;AAjBJ;AAmBD;AACD,OAAO,SAASQ,aAAT,GAAyB;AAC9BlC,EAAAA,WAAW;AACXO,EAAAA,cAAc;AACf","sourcesContent":["import store from './store';\n\nasync function api_get(path) {\n  let text = await fetch(\n    \"http://localhost:4000/api/v1\" + path, {});\n  let resp = await text.json();\n  return resp.data;\n}\n\nasync function api_post(path, data) {\n  let opts = {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json'\n    },\n    body: JSON.stringify(data),\n  };\n  let text = await fetch(\n    \"http://localhost:4000/api/v1\" + path, opts);\n  return await text.json();\n}\n\nexport function fetch_health_vote(health_id) {\n  api_get(\"/votes\").then((data) => {\n    var result;\n    for (let [key, value] of Object.entries(data)) {\n      if (value.health_id == health_id) {\n        result = value\n        console.log(value)\n        break\n      }\n    }\n    store.dispatch({\n    type: 'health_vote/single',\n    data: result,\n  })})\n}\n\nexport function fetch_users() {\n    api_get(\"/users\").then((data) => store.dispatch({\n        type: 'users/set',\n        data: data,\n    }));\n}\n\nexport function fetch_user(id) {\n  api_get(\"/users/\" + id).then((data) => store.dispatch({\n    type: 'users/single',\n    data: data,\n  }));\n}\n\nfunction sortWellness(data) {\n  return data.sort(function(a, b){\n    return a.id - b.id});\n}\n\nexport function fetch_wellness() {\n  api_get(\"/healths\").then((data) => {\n  data = sortWellness(data)\n  store.dispatch({\n    type: 'wellness/set',\n    data: data,\n  })});\n}\n\nfunction handle_wellness_search(search, data) {\n  if (search == \"\") {\n    return data\n  }\n  else {\n    let result = []\n    for (let [key, value] of Object.entries(data)) {\n      if (value.title.includes(search) || value.body.includes(search)) {\n        result.push(value)\n      }\n    }\n    return result\n  }\n}\n\n\nexport function search_wellness(search) {\n  api_get(\"/healths\").then((data) => {\n  data = sortWellness(data)\n  data = handle_wellness_search(search, data)\n  store.dispatch({\n    type: 'wellness/set',\n    data: data,\n  })});\n}\n\nexport function fetch_single_wellness(id) {\n  api_get(\"/healths/\" + id).then((data) => store.dispatch({\n    type: 'wellness/single',\n    data: data,\n  }));\n}\n\nexport function api_login(email, password) {\n  api_post(\"/session\", {email, password}).then((data) => {\n    if (data.session) {\n      let action = {\n        type: 'session/set',\n        data: data.session,\n      }\n      store.dispatch(action);\n    }\n    else if (data.error) {\n     let action = {\n        type: 'error/set',\n        data: data.error,\n      }\n      store.dispatch(action);\n    }\n  });\n}\n\nexport async function create_user(user) {\n  let data = new FormData();\n  data.append(\"user[name]\", user.name);\n  data.append(\"user[email]\", user.email);\n  data.append(\"user[password]\", user.password);\n  data.append(\"user[reason]\", user.reason);\n  if (user.photo === \"undefined\") {\n    user[\"photo\"] = \"\";\n  }\n  data.append(\"user[photo]\", user.photo);\n  let resp = await fetch(\"http://localhost:4000/api/v1/users\", {\n    method: \"POST\",\n    body: data,\n  })\nreturn await resp.json();\n}\n\nexport async function update_user(user) {\n  let data = new FormData();\n  data.append(\"user_id\", user.id);\n  data.append(\"user[name]\", user.name);\n  data.append(\"user[email]\", user.email);\n  data.append(\"user[password]\", user.password);\n  data.append(\"user[reason]\", user.reason);\n  data.append(\"user[photo]\", user.photo);\n  let resp = await fetch(\"http://localhost:4000/api/v1/users/\" + user.id, {\n    method: \"PATCH\",\n    body: data,\n  })\nreturn await resp.json();\n}\n\nexport async function update_wellness(post) {\n  let data = new FormData();\n  data.append(\"health[user_id]\", post.user_id);\n  data.append(\"health[title]\", post.title);\n  data.append(\"health[body]\", post.body);\n  data.append(\"health[photo]\", post.photo);\n  let resp = await fetch(\"http://localhost:4000/api/v1/healths/\" + post.id, {\n    method: \"PATCH\",\n    body: data,\n  })\nreturn await resp.json();\n}\n\n\nexport async function create_wellness(post) {\n  let data = new FormData();\n  data.append(\"health[user_id]\", post.user_id);\n  data.append(\"health[title]\", post.title);\n  data.append(\"health[body]\", post.body);\n  if (post.photo === \"undefined\") {\n    post[\"photo\"] = \"\";\n  }\n  data.append(\"health[photo]\", post.photo);\n  let resp = await fetch(\"http://localhost:4000/api/v1/healths\", {\n    method: \"POST\",\n    body: data,\n  })\nreturn await resp.json();\n}\n\nexport function fetch_reason(reason) {\n  switch(reason){\n    case \"Cat Wellness\":\n      return \"/wellness/list\"\n      break;\n    case \"Breeder/Adoption\":\n      return \"/selladopt\"\n      break;\n    case \"Lost/Found Cats\":\n      return \"/lostfound\"\n      break;\n    case \"Food Choices/Recommendations\":\n      return \"/food\"\n      break;\n    case \"Other\":\n      return \"/forum\"\n      break;\n    default:\n      return \"/\"\n    }\n}\nexport function load_defaults() {\n  fetch_users();\n  fetch_wellness();\n}\n"]},"metadata":{},"sourceType":"module"}